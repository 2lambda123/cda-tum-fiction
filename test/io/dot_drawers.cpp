//
// Created by marcel on 17.09.21.
//

#include "../utils/blueprints/layout_blueprints.hpp"
#include "catch.hpp"

#include <fiction/io/dot_drawers.hpp>
#include <fiction/layouts/cartesian_layout.hpp>
#include <fiction/layouts/clocked_layout.hpp>
#include <fiction/layouts/gate_level_layout.hpp>
#include <fiction/layouts/hexagonal_layout.hpp>
#include <fiction/layouts/tile_based_layout.hpp>
#include <fiction/utils/debug/network_writer.hpp>

#include <sstream>

using namespace fiction;

template <typename Lyt>
void compare_dot_layout(const Lyt& lyt, const char* layout_print)
{
    std::stringstream dot_stream{};

    write_dot_layout(lyt, dot_stream);

    CHECK(dot_stream.str() == layout_print);
}

TEST_CASE("Draw empty Cartesian layout", "[dot-drawers]")
{
    using gate_layout = gate_level_layout<clocked_layout<tile_based_layout<cartesian_layout<cartesian::ucoord_t>>>>;

    gate_layout layout{gate_layout::aspect_ratio{2, 2}};

    constexpr const char* layout_print =
        "digraph layout {  // Generated by fiction v0.4.0 (https://github.com/marcelwa/fiction)\n"
        "rankdir=TB;\n"
        "splines=ortho;\n"
        "nodesep=0.5;\n"
        "node [style=filled fixedsize=true shape=square width=0.5 height=0.5];\n"
        "x0y0 [label=\"\", fillcolor=white];\n"
        "x1y0 [label=\"\", fillcolor=white];\n"
        "x2y0 [label=\"\", fillcolor=white];\n"
        "x0y1 [label=\"\", fillcolor=white];\n"
        "x1y1 [label=\"\", fillcolor=white];\n"
        "x2y1 [label=\"\", fillcolor=white];\n"
        "x0y2 [label=\"\", fillcolor=white];\n"
        "x1y2 [label=\"\", fillcolor=white];\n"
        "x2y2 [label=\"\", fillcolor=white];\n"
        "edge [constraint=false];\n"
        "edge [constraint=true, style=invis];\n"
        "x0y0 -> x0y1 -> x0y2;\n"
        "x1y0 -> x1y1 -> x1y2;\n"
        "x2y0 -> x2y1 -> x2y2;\n"
        "rank = same { x0y0 -> x1y0 -> x2y0 };\n"
        "rank = same { x0y1 -> x1y1 -> x2y1 };\n"
        "rank = same { x0y2 -> x1y2 -> x2y2 };\n"
        "}\n";

    compare_dot_layout(layout, layout_print);
}

TEST_CASE("Draw Cartesian layout blueprints", "[dot-drawers]")
{
    using gate_layout = gate_level_layout<clocked_layout<tile_based_layout<cartesian_layout<cartesian::ucoord_t>>>>;

    SECTION("AND-OR Layout")
    {
        const auto layout = blueprints::and_or_gate_layout<gate_layout>();

        constexpr const char* layout_print =
            "digraph layout {  // Generated by fiction v0.4.0 (https://github.com/marcelwa/fiction)\n"
            "rankdir=TB;\n"
            "splines=ortho;\n"
            "nodesep=0.5;\n"
            "node [style=filled fixedsize=true shape=square width=0.5 height=0.5];\n"
            "x0y0 [label=\"PO\", fillcolor=snow2];\n"
            "x1y0 [label=\"AND\", fillcolor=lightcoral];\n"
            "x2y0 [label=\"PI\", fillcolor=snow2];\n"
            "x3y0 [label=\"\", fillcolor=white];\n"
            "x0y1 [label=\"\", fillcolor=white];\n"
            "x1y1 [label=\"PI\", fillcolor=snow2];\n"
            "x2y1 [label=\"OR\", fillcolor=palegreen2];\n"
            "x3y1 [label=\"PO\", fillcolor=snow2];\n"
            "edge [constraint=false];\n"
            "x2y0 -> x1y0 [style=solid];\n"
            "x1y1 -> x1y0 [style=solid];\n"
            "x2y0 -> x2y1 [style=solid];\n"
            "x1y1 -> x2y1 [style=solid];\n"
            "x1y0 -> x0y0 [style=solid];\n"
            "x2y1 -> x3y1 [style=solid];\n"
            "edge [constraint=true, style=invis];\n"
            "x0y0 -> x0y1;\n"
            "x1y0 -> x1y1;\n"
            "x2y0 -> x2y1;\n"
            "x3y0 -> x3y1;\n"
            "rank = same { x0y0 -> x1y0 -> x2y0 -> x3y0 };\n"
            "rank = same { x0y1 -> x1y1 -> x2y1 -> x3y1 };\n"
            "}\n";

        compare_dot_layout(layout, layout_print);
    }
    SECTION("XOR-MAJ Layout")
    {
        const auto layout = blueprints::xor_maj_gate_layout<gate_layout>();

        constexpr const char* layout_print =
            "digraph layout {  // Generated by fiction v0.4.0 (https://github.com/marcelwa/fiction)\n"
            "rankdir=TB;\n"
            "splines=ortho;\n"
            "nodesep=0.5;\n"
            "node [style=filled fixedsize=true shape=square width=0.5 height=0.5];\n"
            "x0y0 [label=\"PO\", fillcolor=snow2];\n"
            "x1y0 [label=\"XOR\", fillcolor=lightskyblue];\n"
            "x2y0 [label=\"PI\", fillcolor=snow2];\n"
            "x3y0 [label=\"\", fillcolor=white];\n"
            "x0y1 [label=\"\", fillcolor=white];\n"
            "x1y1 [label=\"PI\", fillcolor=snow2];\n"
            "x2y1 [label=\"MAJ\", fillcolor=lightsalmon];\n"
            "x3y1 [label=\"PI\", fillcolor=snow2];\n"
            "x0y2 [label=\"\", fillcolor=white];\n"
            "x1y2 [label=\"\", fillcolor=white];\n"
            "x2y2 [label=\"PO\", fillcolor=snow2];\n"
            "x3y2 [label=\"\", fillcolor=white];\n"
            "edge [constraint=false];\n"
            "x2y0 -> x2y1 [style=solid];\n"
            "x1y1 -> x2y1 [style=solid];\n"
            "x3y1 -> x2y1 [style=solid];\n"
            "x2y0 -> x1y0 [style=solid];\n"
            "x1y1 -> x1y0 [style=solid];\n"
            "x2y1 -> x2y2 [style=solid];\n"
            "x1y0 -> x0y0 [style=solid];\n"
            "edge [constraint=true, style=invis];\n"
            "x0y0 -> x0y1 -> x0y2;\n"
            "x1y0 -> x1y1 -> x1y2;\n"
            "x2y0 -> x2y1 -> x2y2;\n"
            "x3y0 -> x3y1 -> x3y2;\n"
            "rank = same { x0y0 -> x1y0 -> x2y0 -> x3y0 };\n"
            "rank = same { x0y1 -> x1y1 -> x2y1 -> x3y1 };\n"
            "rank = same { x0y2 -> x1y2 -> x2y2 -> x3y2 };\n"
            "}\n";

        compare_dot_layout(layout, layout_print);
    }
    SECTION("Crossing Layout")
    {
        const auto layout = blueprints::crossing_layout<gate_layout>();

        constexpr const char* layout_print =
            "digraph layout {  // Generated by fiction v0.4.0 (https://github.com/marcelwa/fiction)\n"
            "rankdir=TB;\n"
            "splines=ortho;\n"
            "nodesep=0.5;\n"
            "node [style=filled fixedsize=true shape=square width=0.5 height=0.5];\n"
            "x0y0 [label=\"\", fillcolor=white];\n"
            "x1y0 [label=\"PI\", fillcolor=snow2];\n"
            "x2y0 [label=\"PI\", fillcolor=snow2];\n"
            "x3y0 [label=\"\", fillcolor=white];\n"
            "x0y1 [label=\"PI\", fillcolor=snow2];\n"
            "x1y1 [label=\"AND\", fillcolor=lightcoral];\n"
            "x2y1 [label=\"+\", fillcolor=palegoldenrod];\n"
            "x3y1 [label=\"PO\", fillcolor=snow2];\n"
            "x0y2 [label=\"PI\", fillcolor=snow2];\n"
            "x1y2 [label=\"BUF\", fillcolor=palegoldenrod];\n"
            "x2y2 [label=\"AND\", fillcolor=lightcoral];\n"
            "x3y2 [label=\"PO\", fillcolor=snow2];\n"
            "edge [constraint=false];\n"
            "x1y0 -> x1y1 [style=solid];\n"
            "x0y1 -> x1y1 [style=solid];\n"
            "x2y0 -> x2y1 [style=solid];\n"
            "x0y2 -> x1y2 [style=solid];\n"
            "x2y1 -> x2y2 [style=solid];\n"
            "x1y2 -> x2y2 [style=solid];\n"
            "x1y1 -> x2y1 [style=solid];\n"
            "x2y1 -> x3y1 [style=solid];\n"
            "x2y2 -> x3y2 [style=solid];\n"
            "edge [constraint=true, style=invis];\n"
            "x0y0 -> x0y1 -> x0y2;\n"
            "x1y0 -> x1y1 -> x1y2;\n"
            "x2y0 -> x2y1 -> x2y2;\n"
            "x3y0 -> x3y1 -> x3y2;\n"
            "rank = same { x0y0 -> x1y0 -> x2y0 -> x3y0 };\n"
            "rank = same { x0y1 -> x1y1 -> x2y1 -> x3y1 };\n"
            "rank = same { x0y2 -> x1y2 -> x2y2 -> x3y2 };\n"
            "}\n";

        compare_dot_layout(layout, layout_print);
    }
}

TEST_CASE("Draw empty hexagonal layouts", "[dot-drawers]")
{
    SECTION("odd row")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, odd_row>>>>;

        gate_layout layout{gate_layout::aspect_ratio{2, 2}};

        constexpr const char* layout_print = "";

        compare_dot_layout(layout, layout_print);

        debug::write_dot_layout(layout, "empty_odd_row");
    }
    SECTION("even row")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, even_row>>>>;

        gate_layout layout{gate_layout::aspect_ratio{2, 2}};

        constexpr const char* layout_print = "";

        compare_dot_layout(layout, layout_print);

        debug::write_dot_layout(layout, "empty_even_row");
    }
    SECTION("odd column")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, odd_column>>>>;

        gate_layout layout{gate_layout::aspect_ratio{2, 2}};

        constexpr const char* layout_print = "";

        compare_dot_layout(layout, layout_print);

        debug::write_dot_layout(layout, "empty_odd_column");
    }
    SECTION("even column")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, even_column>>>>;

        gate_layout layout{gate_layout::aspect_ratio{2, 2}};

        constexpr const char* layout_print = "";

        compare_dot_layout(layout, layout_print);

        debug::write_dot_layout(layout, "empty_even_column");
    }
}

TEST_CASE("Draw hexagonal layout blueprints", "[dot-drawers]") {}
