//
// Created by marcel on 23.09.21.
//

#include "catch.hpp"

#include <fiction/io/write_fqca_layout.hpp>
#include <fiction/layouts/cartesian_layout.hpp>
#include <fiction/layouts/cell_level_layout.hpp>
#include <fiction/layouts/clocked_layout.hpp>
#include <fiction/technology/cell_technologies.hpp>

#include <sstream>

using namespace fiction;

TEST_CASE("Write empty layout", "[fqca]")
{
    using qca_layout = cell_level_layout<qca_technology, clocked_layout<cartesian_layout<coord_t>>>;

    qca_layout layout{{2, 2, 1}, "empty layout"};

    SECTION("with vias")
    {
        static constexpr const char* fqca_layout =
            "[ empty layout - generated by fiction v0.4.0 (https://github.com/marcelwa/fiction) ]\n"
            "\n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "\n"
            "\n"
            "$\n"
            "\n";

        std::ostringstream layout_stream{};

        write_fqca_layout(layout, layout_stream, {true});

        CHECK(layout_stream.str() == fqca_layout);
    }
    SECTION("without vias")
    {
        static constexpr const char* fqca_layout =
            "[ empty layout - generated by fiction v0.4.0 (https://github.com/marcelwa/fiction) ]\n"
            "\n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "\n"
            "\n"
            "$\n"
            "\n";

        std::ostringstream layout_stream{};

        write_fqca_layout(layout, layout_stream, {false});

        CHECK(layout_stream.str() == fqca_layout);
    }
}

TEST_CASE("Write single-layer AND gate", "[fqca]")
{
    using qca_layout = cell_level_layout<qca_technology, clocked_layout<cartesian_layout<coord_t>>>;

    qca_layout layout{{4, 4}, "AND"};

    layout.assign_cell_type({0, 2}, qca_technology::cell_type::INPUT);
    layout.assign_cell_type({2, 4}, qca_technology::cell_type::INPUT);
    layout.assign_cell_type({2, 0}, qca_technology::cell_type::CONST_0);
    layout.assign_cell_type({2, 1}, qca_technology::cell_type::NORMAL);
    layout.assign_cell_type({2, 2}, qca_technology::cell_type::NORMAL);
    layout.assign_cell_type({2, 3}, qca_technology::cell_type::NORMAL);
    layout.assign_cell_type({1, 2}, qca_technology::cell_type::NORMAL);
    layout.assign_cell_type({3, 2}, qca_technology::cell_type::NORMAL);
    layout.assign_cell_type({4, 2}, qca_technology::cell_type::OUTPUT);

    layout.assign_cell_name({0, 2}, "a");
    layout.assign_cell_name({2, 4}, "b");
    layout.assign_cell_name({4, 2}, "f");

    static constexpr const char* fqca_layout =
        "[ AND - generated by fiction v0.4.0 (https://github.com/marcelwa/fiction) ]\n"
        "\n"
        "= = = = = \n"
        "    -     \n"
        "    0     \n"
        "a 0 0 0 b \n"
        "    0     \n"
        "    c     \n"
        "= = = = = \n"
        "\n"
        "\n"
        "$\n"
        "\n"
        "a:\n"
        "- input\n"
        "- label = \"a\"\n"
        "- clock = 0\n"
        "\n"
        "b:\n"
        "- output\n"
        "- label = \"f\"\n"
        "- clock = 0\n"
        "\n"
        "c:\n"
        "- input\n"
        "- label = \"b\"\n"
        "- clock = 0\n"
        "\n";

    std::ostringstream layout_stream{};

    write_fqca_layout(layout, layout_stream, {false});

    CHECK(layout_stream.str() == fqca_layout);
}
