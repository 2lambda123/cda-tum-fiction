//
// Created by marcel on 23.09.21.
//

#include "catch.hpp"

#include <fiction/io/write_fqca_layout.hpp>
#include <fiction/layouts/cartesian_layout.hpp>
#include <fiction/layouts/cell_level_layout.hpp>
#include <fiction/layouts/clocked_layout.hpp>
#include <fiction/technology/cell_technologies.hpp>

#include <sstream>

using namespace fiction;

TEST_CASE("Write empty layout", "[fqca]")
{
    using qca_layout = cell_level_layout<qca_technology, clocked_layout<cartesian_layout<coord_t>>>;

    qca_layout layout{{2, 2, 1}, "empty layout"};

    SECTION("with vias")
    {
        static constexpr const char* fqca_layout =
            "[ empty layout - generated by fiction v0.4.0 (https://github.com/marcelwa/fiction) ]\n"
            "\n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "\n"
            "\n"
            "$\n"
            "\n";

        std::ostringstream layout_stream{};

        write_fqca_layout(layout, layout_stream, {true});

        CHECK(layout_stream.str() == fqca_layout);
    }
    SECTION("without vias")
    {
        static constexpr const char* fqca_layout =
            "[ empty layout - generated by fiction v0.4.0 (https://github.com/marcelwa/fiction) ]\n"
            "\n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "      \n"
            "      \n"
            "      \n"
            "= = = \n"
            "\n"
            "\n"
            "$\n"
            "\n";

        std::ostringstream layout_stream{};

        write_fqca_layout(layout, layout_stream, {false});

        CHECK(layout_stream.str() == fqca_layout);
    }
}
