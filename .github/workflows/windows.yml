name: Windows CI

on:
  push:
    branches: [ 'main' ]
    paths:
      - '**/*.hpp'
      - '**/*.cpp'
      - '**/*.cmake'
      - '**/CMakeLists.txt'
      - 'libs/**'
      - '.github/workflows/windows.yml'
  pull_request:
    branches: [ 'main' ]
    paths:
      - '**/*.hpp'
      - '**/*.cpp'
      - '**/*.cmake'
      - '**/CMakeLists.txt'
      - 'libs/**'
      - '.github/workflows/windows.yml'
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh  # use pwsh as directory handling does not seem to work with bash

env:
  Z3_VERSION: 4.10.0

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ windows-2019, windows-2022 ]
        toolset: [ v142, v143, ClangCL ]
        build_type: [ Debug, Release ]
        include:
          - os: windows-2019
            env: 'Visual Studio 16 2019'
          - os: windows-2022
            env: 'Visual Studio 17 2022'
        exclude:
          - os: windows-2019
            toolset: v143
          - os: windows-2022
            toolset: v142

    name: ${{matrix.os}} with ${{matrix.env}} and ${{matrix.toolset}} toolset (${{matrix.build_type}} mode)
    runs-on: ${{matrix.os}}

    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: '${{matrix.os}}-${{matrix.toolset}}-${{matrix.build_type}}'
          variant: ccache
          save: true
          max-size: 10G

      - name: Setup Z3 Solver
        id: z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{env.Z3_VERSION}}
          platform: windows
          architecture: x64
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Setup ALGLIB
        run: |
          git clone https://github.com/S-Dafarra/alglib-cmake.git
          cd alglib-cmake
          (Get-Content CMakeLists.txt) -replace '/Ox', '' | Set-Content CMakeLists.txt
          mkdir build && cd build
          cmake .. -G "${{matrix.env}}" -A x64 -T ${{matrix.toolset}}
          cmake --build . --target ALL_BUILD --config ${{matrix.build_type}} -j4
          cmake --build . --target INSTALL --config ${{matrix.build_type}}

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}\build

      - name: Configure CMake
        working-directory: ${{github.workspace}}\build
        run: >
          cmake ${{github.workspace}} -G "${{matrix.env}}" -A x64 -T ${{matrix.toolset}}
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DFICTION_ENABLE_UNITY_BUILD=ON
          -DFICTION_ENABLE_PCH=ON
          -DFICTION_CLI=ON
          -DFICTION_TEST=ON
          -DFICTION_BENCHMARK=OFF
          -DFICTION_EXPERIMENTS=ON
          -DFICTION_Z3=ON
          -DFICTION_ALGLIB=ON
          -DFICTION_WARNINGS_AS_ERRORS=OFF
          -DMOCKTURTLE_EXAMPLES=OFF

      - name: Build
        working-directory: ${{github.workspace}}\build
        run: cmake --build . --config ${{matrix.build_type}} -j4

      - name: Test
        working-directory: ${{github.workspace}}\build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{matrix.build_type}} --verbose --output-on-failure --parallel 4
